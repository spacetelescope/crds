name: cache

on:
  workflow_call:
    outputs:
      path:
        value: ${{ jobs.cache.outputs.path }}
      key:
        value: ${{ jobs.cache.outputs.key }}
  workflow_dispatch:
  schedule:
    # Weekly Monday 9AM
    - cron: "0 9 * * 1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash -leo pipefail {0} {0}

env:
  CRDS_PATH: /tmp/crds-cache-default-test/
  CRDS_TEST_ROOT: /tmp
  CRDS_CLIENT_RETRY_COUNT: 3
  CRDS_CLIENT_RETRY_DELAY_SECONDS: 20
  LD_LIBRARY_PATH: /usr/local/lib

jobs:
  contexts:
    name: retrieve latest CRDS contexts
    runs-on: ubuntu-latest
    outputs:
      hst: ${{ steps.hst_crds_context.outputs.pmap }}
      jwst: ${{ steps.jwst_crds_context.outputs.pmap }}
    steps:
      - id: hst_crds_context
        env:
          OBSERVATORY: hst
          CRDS_SERVER_URL: https://hst-crds.stsci.edu
        run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["${{ env.OBSERVATORY }}"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
      - id: jwst_crds_context
        env:
          OBSERVATORY: jwst
          CRDS_SERVER_URL: https://jwst-crds.stsci.edu
        run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["${{ env.OBSERVATORY }}"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
      - run: echo ${{ steps.hst_crds_context.outputs.pmap }} ${{ steps.jwst_crds_context.outputs.pmap }}
  cache:
    needs: [ contexts ]
    name: download and cache CRDS test files
    runs-on: ubuntu-latest
    outputs:
      path: ${{ env.CRDS_PATH }}
      key: ${{ steps.key.outputs.key }}
    steps:
      - uses: actions/checkout@v3
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: crds-testing
          create-args: >-
            python=3
          init-shell: bash
          cache-environment: true
          cache-downloads: true
      - run: ./install && pip install .
      - id: key
        run: echo "key=crds-${{ needs.data.outputs.hst }}-${{ needs.data.outputs.jwst }}" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        if: always()
        with:
          path: ${{ env.CRDS_PATH }}
          key: ${{ steps.key.outputs.key }}
      - run: ./setup_test_cache ${{ env.CRDS_TEST_ROOT }}
