name: CI

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

env:
  CRDS_TEST_ROOT: /tmp
  CRDS_PATH: /tmp/crds-cache-default-test
  LD_LIBRARY_PATH: /usr/local/lib
  CRDS_CLIENT_RETRY_COUNT: 3
  CRDS_CLIENT_RETRY_DELAY_SECONDS: 20

jobs:
  crds:
    name: cache CRDS test data
    runs-on: ubuntu-latest
    outputs:
      hst: ${{ steps.crds-context-hst.outputs.pmap }}
      jwst: ${{ steps.crds-context-jwst.outputs.pmap }}
    steps:
      - run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["hst"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        id: crds-context-hst
        env:
          CRDS_SERVER_URL: https://hst-crds.stsci.edu
      - run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["jwst"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        id: crds-context-jwst
        env:
          CRDS_SERVER_URL: https://jwst-crds.stsci.edu
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: 'tox.ini'
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/hst
          key: crds-${{ steps.crds-context-hst.outputs.pmap }}
        env:
          CRDS_SERVER_URL: https://hst-crds.stsci.edu
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/jwst
          key: crds-${{ steps.crds-context-jwst.outputs.pmap }}
        env:
          CRDS_SERVER_URL: https://jwst-crds.stsci.edu
      - run: |
          ./install
          ./setup_test_cache ${{ env.CRDS_TEST_ROOT }}
  test:
    name: ${{ matrix.toxenv }} (Python ${{ matrix.python }}, ${{ matrix.os }})
    needs: [ crds ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toxenv: [ test-xdist ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
        os: [ ubuntu-latest, macos-latest ]
        include:
          - toxenv: check-style
            os: ubuntu-latest
            python: '3.x'
          - toxenv: build-dist
            os: ubuntu-latest
            python: '3.x'
          - toxenv: test-cov-xdist
            os: ubuntu-latest
            python: '3.9'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
          cache-dependency-path: 'tox.ini'
      - if: ${{ contains(matrix.toxenv, 'test') }}
        uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/hst
          key: crds-${{ needs.crds.outputs.hst }}
        env:
          CRDS_SERVER_URL: https://hst-crds.stsci.edu
      - if: ${{ contains(matrix.toxenv, 'test') }}
        uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/jwst
          key: crds-${{ needs.crds.outputs.jwst }}
        env:
          CRDS_SERVER_URL: https://jwst-crds.stsci.edu
      - run: pip install tox
      - run: tox -e ${{ matrix.toxenv }}
      - if: ${{ contains(matrix.toxenv, 'cov') }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unit
          fail_ci_if_error: true
