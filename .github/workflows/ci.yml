name: CI

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

env:
  CRDS_SERVER_URL: https://hst-crds.stsci.edu
  CRDS_TEST_ROOT: /tmp
  CRDS_PATH: /tmp/crds-cache-default-test
  LD_LIBRARY_PATH: /usr/local/lib
  CRDS_CLIENT_RETRY_COUNT: 3
  CRDS_CLIENT_RETRY_DELAY_SECONDS: 20

defaults:
  run:
    shell: bash -l {0}

jobs:
  check:
    name: ${{ matrix.toxenv }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toxenv: [ check-style, check-build ]
        python: [ '3.11' ]
        os: [ ubuntu-latest ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'
          cache-dependency-path: setup.py
      - run: pip install "tox>=4.0"
      - run: tox -e ${{ matrix.toxenv }}
  crds:
    name: sync CRDS files
    runs-on: ubuntu-latest
    strategy:
      matrix:
        observatory: [ hst, jwst, roman ]
    env:
      CRDS_SERVER_URL: https://${{ matrix.observatory }}-crds.stsci.edu
    steps:
      - run: pip install crds
      - run: pip freeze
      - run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["${{ matrix.observatory }}"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        id: crds-context
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/${{ matrix.observatory }}
          key: crds-${{ steps.crds-context.outputs.pmap }}
      - run: crds sync --contexts ${{ steps.crds-context.outputs.pmap }} --stats --log-time --check-sha1sum --repair-files --organize=flat
  test:
    name: ${{ matrix.toxenv }} (Python ${{ matrix.python }}, ${{ matrix.os }})
    needs: [ crds ]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        toxenv: [ test-xdist ]
        python: [ '3.8', '3.9', '3.10', '3.11' ]
        os: [ ubuntu-latest, macos-latest ]
        include:
          - toxenv: test-cov-xdist
            os: ubuntu-latest
            python: '3.11'
    steps:
      - uses: actions/checkout@v3
      - uses: mamba-org/provision-with-micromamba@v14
        with:
          environment-file: environment.yml
          extra-specs: |
            python=${{ matrix.python }}
          cache-env: true
          cache-downloads: true
      - run: pip install "tox>=4.0"
      - run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["hst"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        # Get default CRDS_CONTEXT without installing crds client
        # See https://hst-crds.stsci.edu/static/users_guide/web_services.html#generic-request
        id: crds-hst-context
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/hst
          key: crds-${{ steps.crds-hst-context.outputs.pmap }}
      - run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["jwst"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        id: crds-jwst-context
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/jwst
          key: crds-${{ steps.crds-jwst-context.outputs.pmap }}
      - run: >
          echo "pmap=$(
          curl -s -X POST -d '{"jsonrpc": "1.0", "method": "get_default_context", "params": ["roman"], "id": 1}' ${{ env.CRDS_SERVER_URL }}/json/ |
          python -c "import sys, json; print(json.load(sys.stdin)['result'])"
          )" >> $GITHUB_OUTPUT
        id: crds-roman-context
      - uses: actions/cache@v3
        with:
          path: ${{ env.CRDS_PATH }}/mappings/roman
          key: crds-${{ steps.crds-roman-context.outputs.pmap }}
      - run: tox -e ${{ matrix.toxenv }}
      - if: ${{ contains(matrix.toxenv,'-cov') }}
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
